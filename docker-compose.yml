version: '3.8'

services:
  db:
    image: bitnami/mysql:8.4
    container_name: laravel_db
    restart: unless-stopped
    environment:
      # NOTA: Cambia estas credenciales en producción. Puedes moverlas a un archivo .env.docker
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-laravel}
      - MYSQL_USER=${MYSQL_USER:-laravel}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-laravel}
      # Descomentar si quieres permitir contraseña vacía en desarrollo
      # - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 6
    volumes:
      - db_data:/bitnami/mysql
    networks:
      - laravel_net

  laravel:
    image: bitnami/laravel:10
    container_name: laravel_app
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=laravel
      - DB_PASSWORD=laravel
      - DB_DATABASE=laravel
      # Opcional: APP_ENV=local APP_DEBUG=true APP_URL=http://localhost:8000
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - laravel_vendor:/app/vendor
    command:
      - bash
      - -c
      - |
        set -eo pipefail
        echo "[Entrypoint] Iniciando script de preparación de Laravel"
        if [ ! -f .env ]; then
          if [ -f .env.example ]; then
            echo "Copiando .env.example -> .env"; cp .env.example .env || true
          else
            echo "ADVERTENCIA: .env.example no existe, se creará uno mínimo";
            printf '%s\n' \
              'APP_KEY=' \
              'APP_ENV=local' \
              'APP_DEBUG=true' \
              'APP_URL=http://localhost:8000' \
              'LOG_CHANNEL=stack' \
              'DB_CONNECTION=mysql' \
              'DB_HOST=db' \
              'DB_PORT=3306' \
              'DB_DATABASE=laravel' \
              'DB_USERNAME=laravel' \
              'DB_PASSWORD=laravel' \
              > .env
          fi
        fi
        php artisan config:clear || true
        php artisan key:generate --force || true
        echo "Ejecutando migraciones";
        if ! php artisan migrate --force; then
          echo "Migraciones fallaron, reintentando en 8s"; sleep 8; php artisan migrate --force || echo "Segundo intento también falló (continuando)";
        fi
        echo "Lanzando servidor en 0.0.0.0:8000";
        exec php artisan serve --host=0.0.0.0 --port=8000
    networks:
      - laravel_net

  # Servicio opcional para administrar DB (descomenta si lo deseas)
  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin:5
  #   container_name: pma
  #   restart: unless-stopped
  #   environment:
  #     - PMA_HOST=db
  #     - PMA_USER=laravel
  #     - PMA_PASSWORD=laravel
  #   ports:
  #     - "8080:80"
  #   depends_on:
  #     - db
  #   networks:
  #     - laravel_net

networks:
  laravel_net:
    driver: bridge

volumes:
  db_data:
  laravel_vendor:
